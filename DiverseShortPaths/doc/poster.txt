TITLE:
Finding a Diverse Set of Short Paths through a Roadmap

ABSTRACT:
Motion planning for robots is expensive, and there are well-known strategies for constructing a high-level roadmap of an environment which the robot can use to quickly find paths through areas that have already been explored, rather than recomputing from scratch. An unresolved question is how to effectively use such a roadmap if the environment is dynamic. I propose an algorithm to find a set of alternate paths through the roadmap which are short, yet sufficiently diverse, so that if a change in the environment invalidates one path, it will likely not affect the others. My algorithm proceeds by finding the shortest path through each of several subgraphs of the roadmap. These subgraphs are formed by successively sampling random regions of the space that intersect a known path, and edges crossing these regions are removed so that future paths avoid the area. For comparison, I use a well-known algorithm to find the shortest paths in order of increasing length and discard paths which are too similar. I expect to determine which approach is more useful in the context of motion planning with roadmaps by analyzing the speed of each and the quality of the path sets returned by each.

PROBLEM:
Given a roadmap of valid motions, represented as a graph embedded in a state space, and two nodes on the roadmap labeled start and goal, find k paths on the roadmap from start to goal such that each of the paths is short and the set of paths together is diverse. The length of a path is measured as the sum of the weights of its edges. The diversity of a set of paths is the minimum of the distances between any pair of distinct paths in the set.

ALGORITHM:
1. Start from the shortest path
2. Consider multiple scenarios where we simulate an obstacle on the path
3. Recompute the shortest path by removing edges
4. Repeat on these new graphs until there are enough
5. Return generated paths

CAPTIONS:
a) 2 homotopy classes              b) 10 homotopy classes             c) 3 homotopy classes
Figure 1: The grid environment; green circles mark the start and goal configurations; each path is highlighted in a different color. a) Eppstein's 10 shortest paths. They are all short but very similar to each other, consisting of only two homotopy classes. b) 10 paths generated by our algorithm using a radius factor of 0.1075. They are a variety of lengths and very different from one another (diversity 10.026), each path belonging to a separate homotopy class. c) First 10 of Eppstein's shortest paths such that each path added to the set is at a distance of at least 10.026 from each of the others.
Figure 2: Several paths of generated by my algorithm on a more irregular environment than the grid example above. Distinct paths are shown in different colors. The SPARS2 roadmap of valid segments can also be seen. The paths differ on the direction each takes to pass around the obstacles.
Plot 1: Parameter sweep on the radius of simulated obstacles in the grid environment. Diversity of the generated path set (blue) is the average over 10 runs. The larger the radius, the more diverse the set of generated paths.

METHOD & RESULTS:
I test the algorithm by comparing its performance to an existing k-shortest paths algorithm due to Eppstein [1], which returns the k shortest paths for a given query. Performance is measured in two ways: by counting the number of distinct homotopy classes present in the result set, and by measuring the set's diversity. The first test environment is a grid of obstacles for which there is a high number of path homotopy classes. Start and goal locations are chosen near the center, allowing room for us to see if the algorithm produces undesirably long paths. A roadmap of the environment is generated using the SPARS2 planning algorithm.
An important parameter in our algorithm is the radius of simulated obstacles. I define the radius to be the length of the shortest path times a constant factor, and perform a parameter sweep on this factor. The result of this sweep is shown in Plot 1. There is a clear correlation between the radius and the diversity of the resultant path set. This is expected since a larger radius encourages more deviation from previous paths. This can be seen by comparing path sets a) and b) in Figure 1. For additional comparison, I modified the Eppstein algorithm to only add a path to the result set if its distance to all the others was at least the diversity of set b), which yielded set c). By construction, sets b) and c) have the same diversity, yet the images suggest that my algorithm naturally produces a much more rich set.

CONCLUSION:
The algorithm presented finds a rich set paths satisfying the same query. Because the paths are very diverse, this algorithm has applications in problems where the environment changes between the creation of the roadmap and the query. If such a change invalidates the shortest path, we hope that some of these alternate paths will not be affected, allowing the continued use of an existing roadmap without the need to recompute it because of a small change in the environment.
This algorithm can be adapted easily to other needs, as it is very modular. One convenient modification involves adding an extra check at line 8 in the algorithm to filter the set of returned paths according to some criteria. For example, one can require that no path is added to the set unless it is some minimum distance from every path already in the set, effectively putting a lower bound on the diversity of the resultant set. Moreover, the definition of path distance can easily be altered, perhaps, to one which more faithfully captures the intuitive idea of how different two paths are.
Finally, one can supply a different kind of simulated obstacles to avoid. For example, rather than use a ball of some radius as measured in the state space, distances could be measured along the graph.

REFERENCES:
[1] D. Eppstein, Finding the k shortest paths, 35th IEEE Symp. Foundations of Comp. Sci., Santa Fe, 1994, pp. 154-165.
